- name: Prepare Server
  hosts: webservers
  vars_files:
    - vars.yml # should hold sensitive data
  vars:
    http_host: "second-sem-project.getgiddy.xyz"
    http_conf: "second-sem-project.getgiddy.xyz.conf"
    http_port: "80"
    app_dir: "/var/www/{{ http_host }}"
    disable_default: true
    repo_url: https://github.com/f1amy/laravel-realworld-example-app.git
    app_env: production
  become: true

  pre_tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - git
          - libmysqlclient-dev
          - mysql-client
          - mysql-server
          - nginx
          - php8.1
          - php-bcmath
          - php-ctype
          - php-curl
          - php-dom
          - php-fileinfo
          - php-json
          - php-mbstring
          - php8.1-mysql
          - php-pdo
          - php-tokenizer
          - php-xml
          - python3-mysqldb
          - unzip
        state: present
        update_cache: true

    #  Install composer
    - name: Download composer
      ansible.builtin.get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/installer
        owner: "{{ ansible_effective_user_id }}"
        group: "{{ ansible_effective_group_id }}"
        mode: "0755"

    - name: Run install script
      ansible.builtin.shell:
        cmd: cat /tmp/installer | php -- --install-dir=/usr/bin
      args:
        creates: /usr/bin/composer.phar

    - name: Move composer.phar -> composer
      ansible.builtin.command: mv /usr/bin/composer.phar /usr/bin/composer
      args:
        creates: /usr/bin/composer

    - name: Make composer executable
      ansible.builtin.file:
        path: /usr/bin/composer
        mode: u+x
        state: file

  tasks:
    # ########### mysql setup #######################

    - name: Start mysql service
      ansible.builtin.service:
        name: mysql
        state: started
        enabled: true

    - name: Create mysql user
      community.mysql.mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "*.*:ALL"

    - name: Restart MySQL
      ansible.builtin.service:
        name: mysql
        state: restarted

    - name: Create mysql DB
      community.mysql.mysql_db:
        name:
          - "{{ db_name }}"
        state: present
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"

    - name: Restart MySQL
      ansible.builtin.service:
        name: mysql
        state: restarted

    ############ Prepare app ########################
    - name: Add new user
      ansible.builtin.user:
        name: "{{ user }}"
        password: "{{ password }}"
        state: present
        shell: /bin/bash
        update_password: always

    - name: Create remote_tmp dir
      ansible.builtin.file:
        path: "/home/{{ user }}/.ansible/tmp"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: directory
        mode: "0755"

    - name: Pull Repo changes
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        version: main
        force: true
      become_user: "{{ user }}"

    - name: Own {{ app_dir }}
      ansible.builtin.file:
        path: "{{ app_dir }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        recurse: true

    - name: Setup environment variables
      ansible.builtin.template:
        src: ".env.j2"
        dest: "{{ app_dir }}/.env"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0644"

    - name: Set permissions for Laravel storage folder
      ansible.builtin.file:
        path: "{{ app_dir }}/storage"
        state: directory
        recurse: true
        mode: "0755"

    - name: InstallComposerDependencies
      community.general.composer:
        command: install
        working_dir: "{{ app_dir }}"
      become_user: "{{ user }}"
      become_method: su

    - name: Cache Config
      ansible.builtin.command:
        cmd: php artisan config:cache
        chdir: "{{ app_dir }}"
      register: cache_config
      changed_when: cache_config.rc != 0

    - name: Clear View Cache
      ansible.builtin.command:
        cmd: php artisan view:clear
        chdir: "{{ app_dir }}"
      register: clear_view_cache
      changed_when: clear_view_cache.rc != 0

    - name: Run Migrations
      ansible.builtin.command:
        cmd: php artisan migrate --force
        chdir: "{{ app_dir }}"
      register: gen_key_output
      changed_when: gen_key_output.rc != 0

    - name: Generate app key
      ansible.builtin.command:
        cmd: php artisan key:generate
        chdir: "{{ app_dir }}"
      register: gen_key_output
      changed_when: gen_key_output.rc != 0

    ####### Setup Apache #################

    - name: Set up Apache virtualhost
      ansible.builtin.template:
        src: "apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
        mode: "0644"

    - name: Enable new site
      ansible.builtin.command: a2ensite "{{ http_conf }}"
      register: enable_site_output
      changed_when: false
      notify: Restart Apache

    - name: Disable default Apache site
      ansible.builtin.command: a2dissite 000-default.conf
      when: disable_default
      notify: Restart Apache

    - name: Mod rewrite
      ansible.builtin.command: a2enmod rewrite
      changed_when: false
      notify: Restart Apache

    # Postgres setup
    # - name: Run setup_postgres script
    #   ansible.builtin.script: ./setup_postgres.sh

  handlers:
    - name: Restart Apache
      ansible.builtin.service:
        name: apache2
        state: restarted
